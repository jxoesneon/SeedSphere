openapi: 3.0.3
info:
  title: SeedSphere Greenhouse API
  version: 1.0.0-alpha2
  description: |
    Greenhouse (backend) API for link-token binding, SSE rooms, and stream bridging to Gardener (PWA executor).
    Identities: gardener_id (PWA) and seedling_id (addon). Requests use HMAC signing headers.
    CORS: production addon host only; dev allows http://127.0.0.1:8080 and http://localhost:8080.
servers:
  - url: http://localhost:8080
  - url: https://seedsphere.fly.dev
paths:
  /api/link/start:
    post:
      summary: Start link-token flow (PWA)
      tags: [link]
      description: Mints a short-lived link token (TTL 10 minutes).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [gardener_id]
              properties:
                gardener_id: { type: string, description: PWA instance id }
      responses:
        '200':
          description: Link token minted
          headers: { Cache-Control: { schema: { type: string, example: no-store } } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OkLinkStart' }
        '429': { $ref: '#/components/responses/RateLimitedWithRetry' }
  /api/link/complete:
    post:
      summary: Complete link-token flow (Addon)
      tags: [link]
      description: Completes binding and issues a per-binding secret used for HMAC signing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, seedling_id]
              properties:
                token: { type: string }
                seedling_id: { type: string }
      responses:
        '200':
          description: Linked
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OkLinkComplete' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimitedWithRetry' }
  /api/link/status:
    get:
      summary: Check linking status for a gardener_id
      tags: [link]
      parameters:
        - in: query
          name: gardener_id
          required: true
          schema: { type: string }
        - in: query
          name: seedling_id
          required: false
          schema: { type: string }
          description: If provided, the response MAY include linked gardeners for this seedling.
      responses:
        '200':
          description: Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  linked_seedlings: { type: array, items: { type: string } }
                  linked_gardeners: { type: array, items: { type: string } }
  /api/rooms/{gardener_id}/events:
    get:
      summary: Server-Sent Events stream
      tags: [sse]
      parameters:
        - in: path
          name: gardener_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: SSE stream
          headers:
            Content-Type:
              schema: { type: string, example: text/event-stream }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/stream/{type}/{id}:
    post:
      summary: Stream bridge (Addon → Greenhouse → Gardener)
      tags: [streams]
      description: |
        Attempts up to 3 executions with budgets 4s → 6s → 8s selecting next-best Gardener by health.
        On failure, returns last cached value if available (7-day TTL, weekly write cap per stream_key+gardener_id).
        Requests must be HMAC-signed using per-binding secret with the X-SeedSphere-* headers.
      parameters:
        - in: path
          name: type
          required: true
          schema: { type: string, example: movie }
        - in: path
          name: id
          required: true
          schema: { type: string, example: tt1234567 }
        - in: header
          name: X-SeedSphere-G
          required: false
          schema: { type: string }
          description: gardener_id (optional hint)
        - in: header
          name: X-SeedSphere-Id
          required: true
          schema: { type: string }
          description: seedling_id
        - in: header
          name: X-SeedSphere-Ts
          required: true
          schema: { type: string }
        - in: header
          name: X-SeedSphere-Nonce
          required: true
          schema: { type: string }
        - in: header
          name: X-SeedSphere-Sig
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Streams payload
          headers:
            Cache-Control: { schema: { type: string, example: no-store } }
            X-RateLimit-Limit: { schema: { type: string } }
            X-RateLimit-Remaining: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StreamsEnvelope' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/rooms/{gardener_id}/heartbeat:
    post:
      summary: Signed heartbeat for presence/health
      tags: [sse]
      description: Updates presence and emits a heartbeat event on the SSE channel. Requires HMAC headers.
      parameters:
        - in: path
          name: gardener_id
          required: true
          schema: { type: string }
        - in: header
          name: X-SeedSphere-G
          required: true
          schema: { type: string }
          description: gardener_id (must match path)
        - in: header
          name: X-SeedSphere-Id
          required: true
          schema: { type: string }
          description: seedling_id
        - in: header
          name: X-SeedSphere-Ts
          required: true
          schema: { type: string }
        - in: header
          name: X-SeedSphere-Nonce
          required: true
          schema: { type: string }
        - in: header
          name: X-SeedSphere-Sig
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content: { application/json: { schema: { $ref: '#/components/schemas/OkSimple' } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/telemetry/collect:
    post:
      summary: Collect telemetry events
      tags: [telemetry]
      parameters:
        - in: header
          name: x-telemetry-key
          required: false
          schema: { type: string }
          description: Shared key if TELEMETRY_KEY is configured
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Accepted
          headers:
            Cache-Control: { schema: { type: string, example: no-store } }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OkSimple' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/tasks/request:
    post:
      summary: Request task issuance
      tags: [tasks]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id: { type: string }
                type: { type: string, example: normalize }
                params: { type: object, additionalProperties: true }
      responses:
        '200':
          description: Task token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkTaskRequest'
        '429': { $ref: '#/components/responses/RateLimited' }
  /api/tasks/result:
    post:
      summary: Submit task result
      tags: [tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                room_id: { type: string }
                token: { type: string, description: Signed JWT from /api/tasks/request }
                data: { type: object, additionalProperties: true }
      responses:
        '200':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkSimple'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
components:
  responses:
    RateLimited:
      description: Too Many Requests
      headers:
        X-RateLimit-Limit:
          schema: { type: string }
        X-RateLimit-Remaining:
          schema: { type: string }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Err' }
    RateLimitedWithRetry:
      description: Too Many Requests
      headers:
        Retry-After:
          schema: { type: string, example: '60' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Err' }
    BadRequest:
      description: Bad Request
      content: { application/json: { schema: { $ref: '#/components/schemas/Err' } } }
    Unauthorized:
      description: Unauthorized
      content: { application/json: { schema: { $ref: '#/components/schemas/Err' } } }
    NotFound:
      description: Not Found
      content: { application/json: { schema: { $ref: '#/components/schemas/Err' } } }
    Gone:
      description: Gone / expired
      content: { application/json: { schema: { $ref: '#/components/schemas/Err' } } }
  schemas:
    OkSimple:
      type: object
      properties:
        ok: { type: boolean, example: true }
    OkLinkStart:
      allOf:
        - $ref: '#/components/schemas/OkSimple'
        - type: object
          properties:
            token: { type: string }
            gardener_id: { type: string }
            expires_at: { type: integer, format: int64 }
    OkLinkComplete:
      allOf:
        - $ref: '#/components/schemas/OkSimple'
        - type: object
          properties:
            gardener_id: { type: string }
            seedling_id: { type: string }
    StreamsEnvelope:
      type: object
      description: Envelope containing final Stremio-compatible streams array
      properties:
        streams:
          type: array
          items:
            type: object
            additionalProperties: true
    Err:
      type: object
      properties:
        ok: { type: boolean, example: false }
        error: { type: string, example: rate_limited }
